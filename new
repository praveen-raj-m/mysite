Got it! You're working with the **Visual Studio Angular template** (Angular + ASP.NET Core hosted together) and your structure looks like:

```
angularapp_promptengineering/
‚îú‚îÄ‚îÄ angularapp_promptengineering.client/   ‚Üê Angular frontend
‚îÇ   ‚îî‚îÄ‚îÄ src/
‚îÇ       ‚îî‚îÄ‚îÄ app/
‚îÇ           ‚îú‚îÄ‚îÄ app.component.ts
‚îÇ           ‚îú‚îÄ‚îÄ app.component.html
‚îÇ           ‚îú‚îÄ‚îÄ app.component.css
‚îÇ           ‚îî‚îÄ‚îÄ app.module.ts
‚îú‚îÄ‚îÄ angularapp_promptengineering.server/   ‚Üê .NET backend
```

You run it via:

```bash
cd angularapp_promptengineering.server
dotnet run
```

---

## ‚úÖ Let's now begin step-by-step.

### ‚úÖ Step 1: Frontend ‚Äì Add Angular Code in `AppComponent`

#### üîπ `app.module.ts`

Ensure `FormsModule` and `HttpClientModule` are imported:

```ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';

@NgModule({
  declarations: [AppComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

#### üîπ `app.component.ts`

```ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  csvText = '';
  promptText = '';
  summary = '';
  selectedModel = 'gemma:27b';
  temperature = 0.7;

  constructor(private http: HttpClient) {}

  generatePrompt() {
    this.http.post<any>('/api/attribution/generate-prompt', { csv: this.csvText })
      .subscribe(res => this.promptText = res.prompt);
  }

  generateCommentary() {
    this.http.post<any>('/api/attribution/generate-commentary', {
      csv: this.csvText,
      promptOverride: this.promptText,
      model: this.selectedModel,
      temperature: this.temperature
    }).subscribe(res => this.summary = res.summary);
  }
}
```

---

#### üîπ `app.component.html`

```html
<div class="container">
  <h2>Paste CSV</h2>
  <textarea [(ngModel)]="csvText" rows="10" placeholder="Paste CSV..."></textarea>

  <button (click)="generatePrompt()">Generate Prompt</button>

  <h3>Editable Prompt</h3>
  <textarea [(ngModel)]="promptText" rows="10" placeholder="Edit prompt..."></textarea>

  <div class="controls">
    <label>Model:
      <select [(ngModel)]="selectedModel">
        <option value="gemma:27b">gemma:27b</option>
        <option value="llama3">llama3</option>
        <option value="mistral">mistral</option>
      </select>
    </label>

    <label>Temperature: {{ temperature }}
      <input type="range" min="0" max="1" step="0.01" [(ngModel)]="temperature">
    </label>
  </div>

  <button (click)="generateCommentary()">Generate Commentary</button>

  <h3>LLM Summary</h3>
  <pre>{{ summary }}</pre>
</div>
```

---

#### üîπ `app.component.css`

```css
.container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

textarea {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  font-family: monospace;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 20px;
  margin: 10px 5px 10px 0;
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #005999;
}

.controls {
  display: flex;
  gap: 20px;
  align-items: center;
  margin: 10px 0;
}

pre {
  background: #f5f5f5;
  padding: 10px;
  white-space: pre-wrap;
  border-radius: 5px;
  border: 1px solid #ddd;
}
```

Perfect ‚Äî let‚Äôs now set up the backend in your `.NET` project located in:

```
angularapp_promptengineering.server/
```

---

## ‚úÖ Step 2: Backend Setup (File-by-File)

### üîπ 1. Create a Folder `Models` in `server` project

#### File: `Models/AttributionRow.cs`

```csharp
namespace angularapp_promptengineering.server.Models
{
    public class AttributionRow
    {
        public string Sector { get; set; }
        public double PortfolioWeight { get; set; }
        public double PortfolioReturn { get; set; }
        public double PortfolioCtrb { get; set; }
        public double BenchmarkWeight { get; set; }
        public double BenchmarkReturn { get; set; }
        public double BenchmarkCtrb { get; set; }
        public double VarianceWeight { get; set; }
        public double VarianceReturn { get; set; }
        public double VarianceCtrb { get; set; }
        public double Allocation { get; set; }
        public double Selection { get; set; }
        public double TotalManagement => Allocation + Selection;
        public double WeightVariance => PortfolioWeight - BenchmarkWeight;
    }
}
```

#### File: `Models/CsvInput.cs`

```csharp
namespace angularapp_promptengineering.server.Models
{
    public class CsvInput
    {
        public string Csv { get; set; }
        public string PromptOverride { get; set; }
        public string Model { get; set; }
        public float Temperature { get; set; }
    }
}
```

---

### üîπ 2. Create a Folder `Services`

#### File: `Services/OllamaService.cs`

```csharp
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace angularapp_promptengineering.server.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;
        private const string OllamaUrl = "http://localhost:11434/api/generate";

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GetLLMSummaryAsync(string prompt, string model, float temperature)
        {
            var request = new
            {
                model = model,
                prompt = prompt,
                stream = false,
                options = new { temperature = temperature }
            };

            var response = await _httpClient.PostAsJsonAsync(OllamaUrl, request);
            if (!response.IsSuccessStatusCode) return "LLM call failed.";

            var result = await response.Content.ReadFromJsonAsync<OllamaResponse>();
            return result.response;
        }

        private class OllamaResponse
        {
            public string response { get; set; }
        }
    }
}
```

---

### üîπ 3. Create Controller

#### File: `Controllers/AttributionController.cs`

```csharp
using Microsoft.AspNetCore.Mvc;
using angularapp_promptengineering.server.Models;
using angularapp_promptengineering.server.Services;
using System.Text;

namespace angularapp_promptengineering.server.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AttributionController : ControllerBase
    {
        private readonly OllamaService _ollamaService;

        public AttributionController(OllamaService ollamaService)
        {
            _ollamaService = ollamaService;
        }

        [HttpPost("generate-prompt")]
        public IActionResult GeneratePrompt([FromBody] CsvInput input)
        {
            var rows = ParseCsv(input.Csv);
            if (!rows.Any()) return BadRequest("No valid data.");

            var sb = new StringBuilder();
            var top = rows.OrderByDescending(r => r.TotalManagement).Take(2);
            var bottom = rows.OrderBy(r => r.TotalManagement).Take(2);
            var noteworthy = rows
                .Where(r => Math.Abs(r.WeightVariance) > 0.05 && r.Selection > 0.1)
                .Select(r => $"{r.Sector}: Over/Underweight with strong selection (+{r.Selection:F2})");

            sb.AppendLine("Top Sectors:");
            foreach (var r in top)
                sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}");
            sb.AppendLine("Bottom Sectors:");
            foreach (var r in bottom)
                sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}");
            sb.AppendLine("Noteworthy:");
            foreach (var note in noteworthy)
                sb.AppendLine($"- {note}");

            var prompt = $"You are a financial analyst. Based on this data:\n{sb}\nWrite a client-friendly performance attribution summary.";
            return Ok(new { prompt });
        }

        [HttpPost("generate-commentary")]
        public async Task<IActionResult> GenerateCommentary([FromBody] CsvInput input)
        {
            var prompt = input.PromptOverride;
            var model = string.IsNullOrEmpty(input.Model) ? "gemma:27b" : input.Model;
            var temperature = input.Temperature <= 0 ? 0.7f : input.Temperature;

            var result = await _ollamaService.GetLLMSummaryAsync(prompt, model, temperature);
            return Ok(new { summary = result });
        }

        private List<AttributionRow> ParseCsv(string csv)
        {
            var rows = new List<AttributionRow>();
            var lines = csv.Split('\n').Skip(1);
            foreach (var line in lines)
            {
                var cols = line.Split(',');
                if (cols.Length < 12) continue;

                try
                {
                    rows.Add(new AttributionRow
                    {
                        Sector = cols[0],
                        PortfolioWeight = double.Parse(cols[1]),
                        PortfolioReturn = double.Parse(cols[2]),
                        PortfolioCtrb = double.Parse(cols[3]),
                        BenchmarkWeight = double.Parse(cols[4]),
                        BenchmarkReturn = double.Parse(cols[5]),
                        BenchmarkCtrb = double.Parse(cols[6]),
                        VarianceWeight = double.Parse(cols[7]),
                        VarianceReturn = double.Parse(cols[8]),
                        VarianceCtrb = double.Parse(cols[9]),
                        Allocation = double.Parse(cols[10]),
                        Selection = double.Parse(cols[11])
                    });
                }
                catch { continue; }
            }
            return rows;
        }
    }
}
```

---

### üîπ 4. Register Services in `Program.cs`

Open `Program.cs` and add:

```csharp
var builder = WebApplication.CreateBuilder(args);

builder.Services.AddControllers();
builder.Services.AddHttpClient<OllamaService>(); // ‚úÖ Register Ollama service

var app = builder.Build();

app.UseHttpsRedirection();
app.MapControllers();

app.Run();
```

---

## ‚úÖ Done!

You're now ready to run everything from the root terminal:

```bash
cd angularapp_promptengineering.server
dotnet run
```

Then visit: `https://localhost:5001` ‚Üí Angular will be served with backend together.

---

Would you like me to now add:

* A sample CSV file?
* Export to PDF button?
* Charts for sector attribution?

Let me know what‚Äôs next!

