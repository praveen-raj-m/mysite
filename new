Hereâ€™s a complete and clean **DevExpress WPF MVVM implementation** for your feature:

> **Goal**: In a `GridControl` bound to `ContractTermBreakDownItem`, calculate `Percentage` based on `Fees` and `TotalFees` from a related `SelectedContractTerm`. When either `Fees` or `Percentage` changes, the other updates accordingly.

---

## ðŸ”§ FILE 1: `ContractTermBreakDownItem.cs`

This is your model (DTO) for each row in the breakdown table.

```csharp
using DevExpress.Mvvm;
using System;

public class ContractTermBreakDownItem : ViewModelBase
{
    private decimal fees;
    private double percentage;

    // This will be set from the ViewModel
    public ContractTermDTO ParentContractTerm { get; set; }

    public decimal Fees
    {
        get => fees;
        set
        {
            if (SetProperty(ref fees, value, nameof(Fees)))
            {
                if (ParentContractTerm?.TotalFees > 0)
                {
                    percentage = (double)(fees / ParentContractTerm.TotalFees) * 100;
                    RaisePropertyChanged(nameof(Percentage));
                }
            }
        }
    }

    public double Percentage
    {
        get => percentage;
        set
        {
            if (SetProperty(ref percentage, value, nameof(Percentage)))
            {
                if (ParentContractTerm?.TotalFees > 0)
                {
                    fees = Math.Round((decimal)(percentage / 100) * ParentContractTerm.TotalFees, 2);
                    RaisePropertyChanged(nameof(Fees));
                }
            }
        }
    }
}
```

---

## ðŸ”§ FILE 2: `ContractTermDTO.cs`

This holds the total fees for the selected contract term.

```csharp
public class ContractTermDTO : ViewModelBase
{
    private decimal totalFees;

    public decimal TotalFees
    {
        get => totalFees;
        set => SetProperty(ref totalFees, value, nameof(TotalFees));
    }

    // You can add other properties as needed
}
```

---

## ðŸ”§ FILE 3: `ContractDetailsViewModel.cs`

This is your main ViewModel for the view with the GridControl.

```csharp
using DevExpress.Mvvm;
using System.Collections.ObjectModel;

public class ContractDetailsViewModel : ViewModelBase
{
    public ObservableCollection<ContractTermBreakDownItem> ContractTermBreakDownList { get; set; }

    private ContractTermDTO selectedContractTerm;
    public ContractTermDTO SelectedContractTerm
    {
        get => selectedContractTerm;
        set
        {
            if (SetProperty(ref selectedContractTerm, value, nameof(SelectedContractTerm)))
            {
                UpdateBreakDownItemsWithTotalFees();
            }
        }
    }

    public ContractDetailsViewModel()
    {
        ContractTermBreakDownList = new ObservableCollection<ContractTermBreakDownItem>();
    }

    private void UpdateBreakDownItemsWithTotalFees()
    {
        if (SelectedContractTerm == null) return;

        foreach (var item in ContractTermBreakDownList)
        {
            item.ParentContractTerm = SelectedContractTerm;
        }
    }
}
```

---

## ðŸ”§ FILE 4: `ContractDetails.xaml` (View)

Make sure the bindings are set correctly in the `GridControl`:

```xml
<dxg:GridControl ItemsSource="{Binding ContractTermBreakDownList}" AutoGenerateColumns="None">
    <dxg:GridControl.Columns>
        <dxg:GridColumn FieldName="Fees" Header="Fees" />
        <dxg:GridColumn FieldName="Percentage" Header="Percentage" />
    </dxg:GridControl.Columns>
</dxg:GridControl>
```

âœ… Users can now **edit Fees or Percentage**, and the other value will **auto-update** based on `TotalFees` from the selected contract term.

---

## âœ… Final Checklist

* `ContractTermBreakDownItem` uses DevExpress `ViewModelBase` and has `ParentContractTerm` reference.
* Changes in one field update the other.
* ViewModel populates `ParentContractTerm` when selection changes.
* Bound to `GridControl` using MVVM.

Would you also like a live validation or highlighting if `TotalPercentage` â‰  100% across rows?



using DevExpress.Mvvm;
using System;

public class ContractTermBreakDownItem : ViewModelBase
{
    private decimal fees;
    private double percentage;

    public ContractTermDTO ParentContractTerm { get; set; }

    public decimal Fees
    {
        get => fees;
        set
        {
            if (this.SetTrackPropertyAndNotify(ref fees, value, nameof(Fees)))
            {
                if (ParentContractTerm?.TotalFees > 0)
                {
                    percentage = (double)(fees / ParentContractTerm.TotalFees) * 100;
                    this.NotifyPropertyChanged(nameof(Percentage));
                }
            }
        }
    }

    public double Percentage
    {
        get => percentage;
        set
        {
            if (this.SetTrackPropertyAndNotify(ref percentage, value, nameof(Percentage)))
            {
                if (ParentContractTerm?.TotalFees > 0)
                {
                    fees = Math.Round((decimal)(percentage / 100.0) * ParentContractTerm.TotalFees, 2);
                    this.NotifyPropertyChanged(nameof(Fees));
                }
            }
        }
    }
}

