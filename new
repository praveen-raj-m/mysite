// =====================
// Root Folder Structure
// =====================
// AttributionInsightsApp/
// ├── AttributionInsightsApp.csproj
// ├── Program.cs
// ├── Startup.cs (if .NET 5/6)
// ├── Controllers/
// │   └── AttributionController.cs
// ├── Models/
// │   ├── AttributionRow.cs
// │   └── CsvInput.cs
// ├── Services/
// │   └── OllamaService.cs ✅
// ├── ClientApp/ (Angular frontend)
// │   ├── src/app/
// │   │   ├── attribution/
// │   │   │   ├── attribution.component.ts
// │   │   │   ├── attribution.component.html
// │   │   │   └── attribution.component.css
// │   │   └── app.module.ts
// │   └── proxy.conf.json


// ========================
// 1. Models/AttributionRow.cs
// ========================
namespace AttributionInsightsApp.Models
{
    public class AttributionRow
    {
        public string Sector { get; set; }
        public double PortfolioWeight { get; set; }
        public double PortfolioReturn { get; set; }
        public double PortfolioCtrb { get; set; }
        public double BenchmarkWeight { get; set; }
        public double BenchmarkReturn { get; set; }
        public double BenchmarkCtrb { get; set; }
        public double VarianceWeight { get; set; }
        public double VarianceReturn { get; set; }
        public double VarianceCtrb { get; set; }
        public double Allocation { get; set; }
        public double Selection { get; set; }
        public double TotalManagement => Allocation + Selection;
        public double WeightVariance => PortfolioWeight - BenchmarkWeight;
    }
}

// ========================
// 2. Models/CsvInput.cs
// ========================
namespace AttributionInsightsApp.Models
{
    public class CsvInput
    {
        public string Csv { get; set; }
    }
}

// ========================
// 3. Services/OllamaService.cs
// ========================
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace AttributionInsightsApp.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;
        private const string OllamaUrl = "http://localhost:11434/api/generate";

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GetLLMSummaryAsync(string userPrompt)
        {
            var request = new
            {
                model = "gemma:27b",
                prompt = userPrompt,
                stream = false
            };

            var response = await _httpClient.PostAsJsonAsync(OllamaUrl, request);
            if (!response.IsSuccessStatusCode) return "LLM call failed.";

            var result = await response.Content.ReadFromJsonAsync<OllamaResponse>();
            return result.response;
        }

        private class OllamaResponse
        {
            public string response { get; set; }
        }
    }
}

// ==============================
// 4. Controllers/AttributionController.cs
// ==============================
using Microsoft.AspNetCore.Mvc;
using AttributionInsightsApp.Models;
using AttributionInsightsApp.Services;
using System.Text;

namespace AttributionInsightsApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AttributionController : ControllerBase
    {
        private readonly OllamaService _ollamaService;

        public AttributionController(OllamaService ollamaService)
        {
            _ollamaService = ollamaService;
        }

        [HttpPost("analyze-csv")]
        public async Task<IActionResult> AnalyzeCsv([FromBody] CsvInput input)
        {
            var rows = ParseCsvToAttributionRows(input.Csv);
            if (!rows.Any()) return BadRequest("Could not parse input.");

            var sorted = rows.OrderByDescending(r => r.TotalManagement).ToList();
            var top = sorted.Take(2).ToList();
            var bottom = sorted.TakeLast(2).ToList();
            var noteworthy = rows
                .Where(r => Math.Abs(r.WeightVariance) > 0.05 && r.Selection > 0.1)
                .Select(r => $"{r.Sector}: Over/Underweight with strong selection (+{r.Selection:F2})")
                .ToList();

            var sb = new StringBuilder();
            sb.AppendLine("Top Sectors:");
            top.ForEach(r => sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}"));
            sb.AppendLine("Bottom Sectors:");
            bottom.ForEach(r => sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}"));
            sb.AppendLine("Noteworthy:");
            noteworthy.ForEach(n => sb.AppendLine($"- {n}"));

            // Now send to LLM
            var prompt = $"You are a financial analyst. Based on this data:\n{sb.ToString()}\nWrite a client-friendly performance attribution summary.";
            var response = await _ollamaService.GetLLMSummaryAsync(prompt);

            return Ok(new { summary = response });
        }

        private List<AttributionRow> ParseCsvToAttributionRows(string csv)
        {
            var rows = new List<AttributionRow>();
            var lines = csv.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            if (lines.Length <= 1) return rows;

            foreach (var line in lines.Skip(1))
            {
                var cols = line.Split(',', StringSplitOptions.TrimEntries);
                if (cols.Length < 12) continue;

                try
                {
                    rows.Add(new AttributionRow
                    {
                        Sector = cols[0],
                        PortfolioWeight = double.Parse(cols[1]),
                        PortfolioReturn = double.Parse(cols[2]),
                        PortfolioCtrb = double.Parse(cols[3]),
                        BenchmarkWeight = double.Parse(cols[4]),
                        BenchmarkReturn = double.Parse(cols[5]),
                        BenchmarkCtrb = double.Parse(cols[6]),
                        VarianceWeight = double.Parse(cols[7]),
                        VarianceReturn = double.Parse(cols[8]),
                        VarianceCtrb = double.Parse(cols[9]),
                        Allocation = double.Parse(cols[10]),
                        Selection = double.Parse(cols[11])
                    });
                }
                catch { continue; }
            }

            return rows;
        }
    }
}

// ==============================
// 5. Program.cs (for .NET 6/7/8)
// ==============================
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddHttpClient<OllamaService>();

var app = builder.Build();
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();








// =====================
// Root Folder Structure
// =====================
// AttributionInsightsApp/
// ├── AttributionInsightsApp.csproj
// ├── Program.cs
// ├── Startup.cs (if .NET 5/6)
// ├── Controllers/
// │   └── AttributionController.cs
// ├── Models/
// │   ├── AttributionRow.cs
// │   └── CsvInput.cs
// ├── Services/
// │   └── OllamaService.cs ✅
// ├── ClientApp/ (Angular frontend)
// │   ├── src/app/
// │   │   ├── attribution/
// │   │   │   ├── attribution.component.ts
// │   │   │   ├── attribution.component.html
// │   │   │   └── attribution.component.css
// │   │   └── app.module.ts
// │   └── proxy.conf.json


// ========================
// 1. Models/AttributionRow.cs
// ========================
namespace AttributionInsightsApp.Models
{
    public class AttributionRow
    {
        public string Sector { get; set; }
        public double PortfolioWeight { get; set; }
        public double PortfolioReturn { get; set; }
        public double PortfolioCtrb { get; set; }
        public double BenchmarkWeight { get; set; }
        public double BenchmarkReturn { get; set; }
        public double BenchmarkCtrb { get; set; }
        public double VarianceWeight { get; set; }
        public double VarianceReturn { get; set; }
        public double VarianceCtrb { get; set; }
        public double Allocation { get; set; }
        public double Selection { get; set; }
        public double TotalManagement => Allocation + Selection;
        public double WeightVariance => PortfolioWeight - BenchmarkWeight;
    }
}

// ========================
// 2. Models/CsvInput.cs
// ========================
namespace AttributionInsightsApp.Models
{
    public class CsvInput
    {
        public string Csv { get; set; }
    }
}

// ========================
// 3. Services/OllamaService.cs
// ========================
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace AttributionInsightsApp.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;
        private const string OllamaUrl = "http://localhost:11434/api/generate";

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GetLLMSummaryAsync(string userPrompt)
        {
            var request = new
            {
                model = "gemma:27b",
                prompt = userPrompt,
                stream = false
            };

            var response = await _httpClient.PostAsJsonAsync(OllamaUrl, request);
            if (!response.IsSuccessStatusCode) return "LLM call failed.";

            var result = await response.Content.ReadFromJsonAsync<OllamaResponse>();
            return result.response;
        }

        private class OllamaResponse
        {
            public string response { get; set; }
        }
    }
}

// ==============================
// 4. Controllers/AttributionController.cs
// ==============================
using Microsoft.AspNetCore.Mvc;
using AttributionInsightsApp.Models;
using AttributionInsightsApp.Services;
using System.Text;

namespace AttributionInsightsApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AttributionController : ControllerBase
    {
        private readonly OllamaService _ollamaService;

        public AttributionController(OllamaService ollamaService)
        {
            _ollamaService = ollamaService;
        }

        [HttpPost("analyze-csv")]
        public async Task<IActionResult> AnalyzeCsv([FromBody] CsvInput input)
        {
            var rows = ParseCsvToAttributionRows(input.Csv);
            if (!rows.Any()) return BadRequest("Could not parse input.");

            var sorted = rows.OrderByDescending(r => r.TotalManagement).ToList();
            var top = sorted.Take(2).ToList();
            var bottom = sorted.TakeLast(2).ToList();
            var noteworthy = rows
                .Where(r => Math.Abs(r.WeightVariance) > 0.05 && r.Selection > 0.1)
                .Select(r => $"{r.Sector}: Over/Underweight with strong selection (+{r.Selection:F2})")
                .ToList();

            var sb = new StringBuilder();
            sb.AppendLine("Top Sectors:");
            top.ForEach(r => sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}"));
            sb.AppendLine("Bottom Sectors:");
            bottom.ForEach(r => sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}"));
            sb.AppendLine("Noteworthy:");
            noteworthy.ForEach(n => sb.AppendLine($"- {n}"));

            // Now send to LLM
            var prompt = $"You are a financial analyst. Based on this data:\n{sb.ToString()}\nWrite a client-friendly performance attribution summary.";
            var response = await _ollamaService.GetLLMSummaryAsync(prompt);

            return Ok(new { summary = response });
        }

        private List<AttributionRow> ParseCsvToAttributionRows(string csv)
        {
            var rows = new List<AttributionRow>();
            var lines = csv.Split('\n', StringSplitOptions.RemoveEmptyEntries);
            if (lines.Length <= 1) return rows;

            foreach (var line in lines.Skip(1))
            {
                var cols = line.Split(',', StringSplitOptions.TrimEntries);
                if (cols.Length < 12) continue;

                try
                {
                    rows.Add(new AttributionRow
                    {
                        Sector = cols[0],
                        PortfolioWeight = double.Parse(cols[1]),
                        PortfolioReturn = double.Parse(cols[2]),
                        PortfolioCtrb = double.Parse(cols[3]),
                        BenchmarkWeight = double.Parse(cols[4]),
                        BenchmarkReturn = double.Parse(cols[5]),
                        BenchmarkCtrb = double.Parse(cols[6]),
                        VarianceWeight = double.Parse(cols[7]),
                        VarianceReturn = double.Parse(cols[8]),
                        VarianceCtrb = double.Parse(cols[9]),
                        Allocation = double.Parse(cols[10]),
                        Selection = double.Parse(cols[11])
                    });
                }
                catch { continue; }
            }

            return rows;
        }
    }
}

// ==============================
// 5. Program.cs (for .NET 6/7/8)
// ==============================
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();
builder.Services.AddHttpClient<OllamaService>();

var app = builder.Build();
app.UseHttpsRedirection();
app.UseAuthorization();
app.MapControllers();
app.Run();

// ==============================
// 6. ClientApp/src/app/attribution/attribution.component.ts
// ==============================
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-attribution',
  templateUrl: './attribution.component.html',
  styleUrls: ['./attribution.component.css']
})
export class AttributionComponent {
  csvText = '';
  summary = '';

  constructor(private http: HttpClient) {}

  analyze() {
    this.http.post<any>('/api/attribution/analyze-csv', { csv: this.csvText })
      .subscribe(result => {
        this.summary = result.summary;
      });
  }
}

// ==============================
// 7. ClientApp/src/app/attribution/attribution.component.html
// ==============================
<h2>Paste Attribution CSV</h2>
<textarea [(ngModel)]="csvText" rows="10" cols="100" placeholder="Paste CSV here..."></textarea>
<br />
<button (click)="analyze()">Analyze</button>

<h3>LLM Summary</h3>
<pre>{{ summary }}</pre>

// ==============================
// 8. ClientApp/src/app/app.module.ts
// ==============================
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';

import { AppComponent } from './app.component';
import { AttributionComponent } from './attribution/attribution.component';

@NgModule({
  declarations: [AppComponent, AttributionComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule {}

// ==============================
// 9. ClientApp/proxy.conf.json
// ==============================
{
  "/api": {
    "target": "https://localhost:5001",
    "secure": false
  }
}

// ==============================
// 10. Notes to Run Project
// ==============================
// ✅ Run backend in Visual Studio (launches ASP.NET Core API)
// ✅ In terminal: cd ClientApp && npm install && ng serve --proxy-config proxy.conf.json
// ✅ Navigate to http://localhost:4200 to access the Angular UI
// ✅ Paste CSV, click Analyze, view summary from Ollama



// ... [previous unchanged content above] ...

// ==============================
// 1. Update Models/CsvInput.cs
// ==============================
namespace AttributionInsightsApp.Models
{
    public class CsvInput
    {
        public string Csv { get; set; }
        public string PromptOverride { get; set; }
        public string Model { get; set; }
        public float Temperature { get; set; }
    }
}

// ==============================
// 2. Update Services/OllamaService.cs
// ==============================
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace AttributionInsightsApp.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;
        private const string OllamaUrl = "http://localhost:11434/api/generate";

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GetLLMSummaryAsync(string userPrompt, string model, float temperature)
        {
            var request = new
            {
                model = model,
                prompt = userPrompt,
                stream = false,
                options = new { temperature = temperature }
            };

            var response = await _httpClient.PostAsJsonAsync(OllamaUrl, request);
            if (!response.IsSuccessStatusCode) return "LLM call failed.";

            var result = await response.Content.ReadFromJsonAsync<OllamaResponse>();
            return result.response;
        }

        private class OllamaResponse
        {
            public string response { get; set; }
        }
    }
}

// ==============================
// 3. Update Controllers/AttributionController.cs
// ==============================
[HttpPost("generate-commentary")]
public async Task<IActionResult> GenerateCommentary([FromBody] CsvInput input)
{
    if (string.IsNullOrWhiteSpace(input.PromptOverride))
        return BadRequest("Prompt is empty.");

    var model = string.IsNullOrWhiteSpace(input.Model) ? "gemma:27b" : input.Model;
    var temp = input.Temperature <= 0 ? 0.7f : input.Temperature;

    var response = await _ollamaService.GetLLMSummaryAsync(input.PromptOverride, model, temp);
    return Ok(new { summary = response });
}

// ==============================
// 4. Update ClientApp/src/app/attribution/attribution.component.ts
// ==============================
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-attribution',
  templateUrl: './attribution.component.html',
  styleUrls: ['./attribution.component.css']
})
export class AttributionComponent {
  csvText = '';
  promptText = '';
  summary = '';
  selectedModel = 'gemma:27b';
  temperature = 0.7;

  constructor(private http: HttpClient) {}

  generatePrompt() {
    this.http.post<any>('/api/attribution/generate-prompt', { csv: this.csvText })
      .subscribe(result => {
        this.promptText = result.prompt;
      });
  }

  generateCommentary() {
    this.http.post<any>('/api/attribution/generate-commentary', {
      csv: this.csvText,
      promptOverride: this.promptText,
      model: this.selectedModel,
      temperature: this.temperature
    }).subscribe(result => {
      this.summary = result.summary;
    });
  }
}

// ==============================
// 5. Update ClientApp/src/app/attribution/attribution.component.html
// ==============================
<div class="container">
  <h2>Paste Attribution CSV</h2>
  <textarea [(ngModel)]="csvText" rows="10" cols="100" placeholder="Paste CSV here..."></textarea>
  <br />
  <button (click)="generatePrompt()">Generate Prompt</button>
  <br />

  <h3>Editable Prompt</h3>
  <textarea [(ngModel)]="promptText" rows="10" cols="100" placeholder="Prompt will appear here..."></textarea>

  <div class="controls">
    <label>Model:
      <select [(ngModel)]="selectedModel">
        <option value="gemma:27b">gemma:27b</option>
        <option value="llama3">llama3</option>
        <option value="mistral">mistral</option>
      </select>
    </label>
    <label>Temperature: {{ temperature }}
      <input type="range" min="0" max="1" step="0.01" [(ngModel)]="temperature">
    </label>
  </div>

  <button (click)="generateCommentary()">Generate Commentary</button>

  <h3>LLM Summary</h3>
  <pre>{{ summary }}</pre>
</div>

// ==============================
// 6. Update ClientApp/src/app/attribution/attribution.component.css
// ==============================
.container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

textarea {
  width: 100%;
  margin-bottom: 10px;
  font-family: monospace;
  padding: 10px;
  border: 1px solid #ccc;
  border-radius: 5px;
}

button {
  padding: 10px 20px;
  margin: 10px 5px 10px 0;
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 5px;
  cursor: pointer;
}

button:hover {
  background-color: #005999;
}

pre {
  background: #f3f3f3;
  padding: 10px;
  white-space: pre-wrap;
  border-radius: 5px;
  border: 1px solid #ddd;
}

.controls {
  display: flex;
  align-items: center;
  gap: 20px;
  margin: 10px 0;
}

label {
  font-weight: bold;
}



















Here’s the **complete, full-stack working solution** with **all requested features**:

---

## ✅ FEATURES INCLUDED

1. **CSV input textarea**
2. **Generate Prompt** button (backend processes data)
3. **Editable prompt textarea**
4. **Dropdown for model selection**
5. **Temperature slider**
6. **Generate Commentary** button (calls Ollama with editable prompt, model, temperature)
7. **Full CSS styling**
8. **Backend integration with Ollama (Gemma, LLaMA, Mistral, etc.)**

---

## 📁 FOLDER STRUCTURE

```
AttributionInsightsApp/
├── Controllers/
│   └── AttributionController.cs
├── Models/
│   ├── AttributionRow.cs
│   └── CsvInput.cs
├── Services/
│   └── OllamaService.cs
├── Program.cs
├── ClientApp/
│   ├── proxy.conf.json
│   └── src/app/
│       ├── attribution/
│       │   ├── attribution.component.ts
│       │   ├── attribution.component.html
│       │   └── attribution.component.css
│       └── app.module.ts
```

---

## 🔧 BACKEND (.NET 7/8)

### `Models/AttributionRow.cs`

```csharp
namespace AttributionInsightsApp.Models
{
    public class AttributionRow
    {
        public string Sector { get; set; }
        public double PortfolioWeight { get; set; }
        public double PortfolioReturn { get; set; }
        public double PortfolioCtrb { get; set; }
        public double BenchmarkWeight { get; set; }
        public double BenchmarkReturn { get; set; }
        public double BenchmarkCtrb { get; set; }
        public double VarianceWeight { get; set; }
        public double VarianceReturn { get; set; }
        public double VarianceCtrb { get; set; }
        public double Allocation { get; set; }
        public double Selection { get; set; }
        public double TotalManagement => Allocation + Selection;
        public double WeightVariance => PortfolioWeight - BenchmarkWeight;
    }
}
```

### `Models/CsvInput.cs`

```csharp
namespace AttributionInsightsApp.Models
{
    public class CsvInput
    {
        public string Csv { get; set; }
        public string PromptOverride { get; set; }
        public string Model { get; set; }
        public float Temperature { get; set; }
    }
}
```

### `Services/OllamaService.cs`

```csharp
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;

namespace AttributionInsightsApp.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;
        private const string OllamaUrl = "http://localhost:11434/api/generate";

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GetLLMSummaryAsync(string prompt, string model, float temperature)
        {
            var request = new
            {
                model = model,
                prompt = prompt,
                stream = false,
                options = new { temperature = temperature }
            };

            var response = await _httpClient.PostAsJsonAsync(OllamaUrl, request);
            if (!response.IsSuccessStatusCode) return "LLM call failed.";

            var result = await response.Content.ReadFromJsonAsync<OllamaResponse>();
            return result.response;
        }

        private class OllamaResponse
        {
            public string response { get; set; }
        }
    }
}
```

### `Controllers/AttributionController.cs`

```csharp
using Microsoft.AspNetCore.Mvc;
using AttributionInsightsApp.Models;
using AttributionInsightsApp.Services;
using System.Text;

namespace AttributionInsightsApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AttributionController : ControllerBase
    {
        private readonly OllamaService _ollamaService;

        public AttributionController(OllamaService ollamaService)
        {
            _ollamaService = ollamaService;
        }

        [HttpPost("generate-prompt")]
        public IActionResult GeneratePrompt([FromBody] CsvInput input)
        {
            var rows = ParseCsv(input.Csv);
            if (!rows.Any()) return BadRequest("No valid data.");

            var sb = new StringBuilder();
            var top = rows.OrderByDescending(r => r.TotalManagement).Take(2);
            var bottom = rows.OrderBy(r => r.TotalManagement).Take(2);
            var noteworthy = rows
                .Where(r => Math.Abs(r.WeightVariance) > 0.05 && r.Selection > 0.1)
                .Select(r => $"{r.Sector}: Over/Underweight with strong selection (+{r.Selection:F2})");

            sb.AppendLine("Top Sectors:");
            foreach (var r in top)
                sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}");
            sb.AppendLine("Bottom Sectors:");
            foreach (var r in bottom)
                sb.AppendLine($"- {r.Sector}: TotalMgmt {r.TotalManagement:F2}, Alloc {r.Allocation:F2}, Sel {r.Selection:F2}");
            sb.AppendLine("Noteworthy:");
            foreach (var note in noteworthy)
                sb.AppendLine($"- {note}");

            var prompt = $"You are a financial analyst. Based on this data:\n{sb}\nWrite a client-friendly performance attribution summary.";
            return Ok(new { prompt });
        }

        [HttpPost("generate-commentary")]
        public async Task<IActionResult> GenerateCommentary([FromBody] CsvInput input)
        {
            var prompt = input.PromptOverride;
            var model = string.IsNullOrEmpty(input.Model) ? "gemma:27b" : input.Model;
            var temperature = input.Temperature <= 0 ? 0.7f : input.Temperature;

            var result = await _ollamaService.GetLLMSummaryAsync(prompt, model, temperature);
            return Ok(new { summary = result });
        }

        private List<AttributionRow> ParseCsv(string csv)
        {
            var rows = new List<AttributionRow>();
            var lines = csv.Split('\n').Skip(1);
            foreach (var line in lines)
            {
                var cols = line.Split(',');
                if (cols.Length < 12) continue;

                try
                {
                    rows.Add(new AttributionRow
                    {
                        Sector = cols[0],
                        PortfolioWeight = double.Parse(cols[1]),
                        PortfolioReturn = double.Parse(cols[2]),
                        PortfolioCtrb = double.Parse(cols[3]),
                        BenchmarkWeight = double.Parse(cols[4]),
                        BenchmarkReturn = double.Parse(cols[5]),
                        BenchmarkCtrb = double.Parse(cols[6]),
                        VarianceWeight = double.Parse(cols[7]),
                        VarianceReturn = double.Parse(cols[8]),
                        VarianceCtrb = double.Parse(cols[9]),
                        Allocation = double.Parse(cols[10]),
                        Selection = double.Parse(cols[11])
                    });
                }
                catch { continue; }
            }
            return rows;
        }
    }
}
```

### `Program.cs`

```csharp
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers();
builder.Services.AddHttpClient<OllamaService>();
var app = builder.Build();
app.MapControllers();
app.UseHttpsRedirection();
app.Run();
```

---

## 🌐 FRONTEND (Angular)

### `proxy.conf.json`

```json
{
  "/api": {
    "target": "https://localhost:5001",
    "secure": false
  }
}
```

### `attribution.component.ts`

```ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-attribution',
  templateUrl: './attribution.component.html',
  styleUrls: ['./attribution.component.css']
})
export class AttributionComponent {
  csvText = '';
  promptText = '';
  summary = '';
  selectedModel = 'gemma:27b';
  temperature = 0.7;

  constructor(private http: HttpClient) {}

  generatePrompt() {
    this.http.post<any>('/api/attribution/generate-prompt', { csv: this.csvText })
      .subscribe(res => this.promptText = res.prompt);
  }

  generateCommentary() {
    this.http.post<any>('/api/attribution/generate-commentary', {
      csv: this.csvText,
      promptOverride: this.promptText,
      model: this.selectedModel,
      temperature: this.temperature
    }).subscribe(res => this.summary = res.summary);
  }
}
```

### `attribution.component.html`

```html
<div class="container">
  <h2>Paste CSV</h2>
  <textarea [(ngModel)]="csvText" rows="10" placeholder="Paste CSV..."></textarea>

  <button (click)="generatePrompt()">Generate Prompt</button>

  <h3>Prompt</h3>
  <textarea [(ngModel)]="promptText" rows="10" placeholder="Editable prompt..."></textarea>

  <div class="controls">
    <label>Model:
      <select [(ngModel)]="selectedModel">
        <option value="gemma:27b">gemma:27b</option>
        <option value="llama3">llama3</option>
        <option value="mistral">mistral</option>
      </select>
    </label>

    <label>Temperature: {{ temperature }}
      <input type="range" min="0" max="1" step="0.01" [(ngModel)]="temperature">
    </label>
  </div>

  <button (click)="generateCommentary()">Generate Commentary</button>

  <h3>LLM Summary</h3>
  <pre>{{ summary }}</pre>
</div>
```

### `attribution.component.css`

```css
.container {
  padding: 20px;
  font-family: Arial, sans-serif;
}

textarea {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  font-family: monospace;
}

button {
  margin-top: 10px;
  padding: 10px 20px;
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 5px;
}

button:hover {
  background-color: #005999;
}

.controls {
  margin: 10px 0;
  display: flex;
  gap: 20px;
}

pre {
  background: #f5f5f5;
  padding: 15px;
  border-radius: 5px;
}
```

### `app.module.ts`

```ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';
import { HttpClientModule } from '@angular/common/http';
import { AppComponent } from './app.component';
import { AttributionComponent } from './attribution/attribution.component';

@NgModule({
  declarations: [AppComponent, AttributionComponent],
  imports: [BrowserModule, FormsModule, HttpClientModule],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

---

## 🚀 RUNNING

### Start backend

```bash
dotnet run
```

### Start frontend

```bash
cd ClientApp
npm install
ng serve --proxy-config proxy.conf.json
```

Open browser → `http://localhost:4200`

---

Let me know if you want:

* PDF/Word export
* Excel uploader
* Chart visualizations
* Saved project state

Ready to help with next feature 💡

