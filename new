Great! Let’s create the **Ollama wrapper** using **Visual Studio** step by step with the following stack:

* **Angular frontend** (served from ASP.NET Core backend)
* **ASP.NET Core Web API** backend
* **Ollama model running locally** (you must run `ollama serve` separately)

---

## ✅ STEP 1: Create Project in Visual Studio

### 🔹 1.1 Create a New Project

1. Open **Visual Studio 2022**
2. Click **Create a new project**
3. Select **"ASP.NET Core with Angular"**
4. Click **Next**

### 🔹 1.2 Configure Project

* Name: `OllamaWrapperApp`
* Location: Choose a location
* Framework: Choose **.NET 8 (Long-term support)**
* Click **Create**

---

## ✅ STEP 2: Project Structure

Visual Studio will scaffold a project with:

* `ClientApp/` → Angular code
* `Controllers/WeatherForecastController.cs` → You will replace with your own `PromptController.cs`
* `Program.cs` → Startup configuration
* `appsettings.json`

---

## ✅ STEP 3: Create the Prompt API Backend

### 🔹 3.1 Create a Request Model

**📁 Models/PromptRequest.cs**

```csharp
namespace OllamaWrapperApp.Models
{
    public class PromptRequest
    {
        public string Prompt { get; set; }
    }
}
```

### 🔹 3.2 Create OllamaService

**📁 Services/OllamaService.cs**

```csharp
using System.Net.Http.Json;

namespace OllamaWrapperApp.Services
{
    public class OllamaService
    {
        private readonly HttpClient _httpClient;

        public OllamaService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        public async Task<string> GeneratePromptAsync(string prompt)
        {
            var request = new
            {
                model = "llama3",
                prompt = prompt
            };

            var response = await _httpClient.PostAsJsonAsync("http://localhost:11434/api/generate", request);
            response.EnsureSuccessStatusCode();

            var json = await response.Content.ReadFromJsonAsync<JsonElement>();
            return json.GetProperty("response").GetString();
        }
    }
}
```

### 🔹 3.3 Register OllamaService

**📄 Program.cs**

```csharp
builder.Services.AddHttpClient<OllamaService>();
```

Add this just before:

```csharp
var app = builder.Build();
```

### 🔹 3.4 Create the Controller

**📁 Controllers/PromptController.cs**

```csharp
using Microsoft.AspNetCore.Mvc;
using OllamaWrapperApp.Models;
using OllamaWrapperApp.Services;

namespace OllamaWrapperApp.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class PromptController : ControllerBase
    {
        private readonly OllamaService _ollamaService;

        public PromptController(OllamaService ollamaService)
        {
            _ollamaService = ollamaService;
        }

        [HttpPost("generate")]
        public async Task<IActionResult> Generate([FromBody] PromptRequest request)
        {
            var result = await _ollamaService.GeneratePromptAsync(request.Prompt);
            return Ok(new { response = result });
        }
    }
}
```

---

## ✅ STEP 4: Update Angular Frontend

### 🔹 4.1 Navigate to Angular App

In terminal:

```bash
cd ClientApp
npm install
```

### 🔹 4.2 Update `app.component.ts`

**📁 ClientApp/src/app/app.component.ts**

```ts
import { Component } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
})
export class AppComponent {
  prompt = '';
  response = '';

  constructor(private http: HttpClient) {}

  sendPrompt() {
    this.http.post<any>('/api/prompt/generate', { prompt: this.prompt })
      .subscribe(res => {
        this.response = res.response;
      });
  }
}
```

### 🔹 4.3 Update `app.component.html`

**📁 ClientApp/src/app/app.component.html**

```html
<div style="padding: 20px;">
  <h2>Ollama Prompt Wrapper</h2>
  <textarea [(ngModel)]="prompt" rows="5" cols="50"></textarea><br><br>
  <button (click)="sendPrompt()">Generate</button>
  <h4>Response:</h4>
  <pre>{{ response }}</pre>
</div>
```

### 🔹 4.4 Import FormsModule

**📁 ClientApp/src/app/app.module.ts**

```ts
import { FormsModule } from '@angular/forms';
@NgModule({
  ...
  imports: [ BrowserModule, HttpClientModule, FormsModule ],
  ...
})
```

---

## ✅ STEP 5: Run Ollama Server

Make sure Ollama is running locally:

```bash
ollama serve
ollama run llama3
```

---

## ✅ STEP 6: Run the Whole Project

In **Visual Studio**:

* Press **F5** or click **"Run"**
* This will:

  * Launch ASP.NET Core backend
  * Automatically build and serve Angular app from `ClientApp`
* Go to `https://localhost:PORT/`
* You should see the Angular interface and be able to type prompts and get responses!

---

Would you like me to create the full `launch.json` or walk you through how to debug both frontend + backend?
