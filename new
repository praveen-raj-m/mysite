generatePrompt() {
  try {
    const lines = this.rawInput.trim().split('\n');
    if (lines.length < 2) {
      this.prompt = 'Invalid table.';
      return;
    }

    const headers = this.yourHeaders;
    const dataLines = lines.slice(1); // skip first line

    // Parse rows
    const dataRows = dataLines.map(line => {
      const values = line.split(',').map(v => v.trim());
      const row: any = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || '';
      });
      return row;
    });

    // Remove total row
    const totalRow = dataRows.pop()!;
    const performanceCol = headers[headers.length - 1];
    const investmentCol = 'Portfolio Weight';

    // Sort by performance and investment
    const performanceSorted = [...dataRows].sort((a, b) =>
      (parseFloat(b[performanceCol]) || 0) - (parseFloat(a[performanceCol]) || 0)
    );
    const investmentSorted = [...dataRows].sort((a, b) =>
      (parseFloat(b[investmentCol]) || 0) - (parseFloat(a[investmentCol]) || 0)
    );

    // Tag maps to track ranking
    const performanceTagMap = new Map<any, string[]>();
    const investmentTagMap = new Map<any, string[]>();

    // Top Performer / Underperformer
    performanceSorted.forEach((row, i, arr) => {
      if (i < 3) performanceTagMap.set(row, [`Top Performer ${i + 1}`]);
      else if (i >= arr.length - 3)
        performanceTagMap.set(row, [`Underperformer ${arr.length - i}`]);
    });

    // High Investment / Low Investment
    investmentSorted.forEach((row, i, arr) => {
      const existing = investmentTagMap.get(row) || [];
      if (i < 3) investmentTagMap.set(row, [...existing, `High Investment ${i + 1}`]);
      else if (i >= arr.length - 3)
        investmentTagMap.set(row, [...existing, `Low Investment ${arr.length - i}`]);
    });

    // Final sort by performance
    const sortedFinal = [...performanceSorted].map(row => {
      const tags = [
        ...(performanceTagMap.get(row) || []),
        ...(investmentTagMap.get(row) || [])
      ];
      return tags.length > 0 ? { ...row, Tags: tags } : row;
    });

    // Add total
    const totalData: any = {};
    headers.slice(1).forEach(header => {
      totalData[header] = totalRow[header] || '';
    });

    const outputJson = [...sortedFinal, { Total: totalData }];
    const jsonString = JSON.stringify(outputJson, null, 2);

    this.prompt =
      `You are a financial analyst. Analyze the following portfolio attribution data.\n\n` +
      `The data is sorted by "${performanceCol}". Rows are tagged with numbered labels:\n` +
      `• "Top Performer 1", "Top Performer 2", etc.\n` +
      `• "High Investment 1", "Low Investment 2", etc.\n` +
      `The final row summarizes total values across all columns.\n\n` +
      `Data:\n${jsonString}`;
  } catch (err) {
    this.prompt = 'Error parsing input.';
  }
}
