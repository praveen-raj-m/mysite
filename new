Thanks — this error typically occurs if you declare the `role` field as a literal type incorrectly. Let's fix it properly.

---

### ✅ The Problem

You're probably doing this:

```ts
chatHistory: { role: 'user' | 'assistant'; content: string }[] = [];
```

But TypeScript needs to **treat role as a string literal**, not just any string.

When you define a message like this:

```ts
const role = 'user'; // ← this is inferred as string (not literal 'user')
```

...and try to assign it to `role: 'user' | 'assistant'`, TypeScript complains:

> Type `string` is not assignable to `'user' | 'assistant'`.

---

### ✅ The Fix: Use a Type Assertion (or define it as literal)

```ts
const userMsg = { role: 'user' as const, content: message };
```

OR better: use a clean interface like this:

---

### ✅ Best Practice (with Interface)

#### 1. At the top of your `app.component.ts`:

```ts
type ChatRole = 'user' | 'assistant';

interface ChatMessage {
  role: ChatRole;
  content: string;
}
```

#### 2. Then declare:

```ts
chatHistory: ChatMessage[] = [];
```

#### 3. Now your message creation is valid:

```ts
const userMsg: ChatMessage = { role: 'user', content: message };
const placeholder: ChatMessage = { role: 'assistant', content: 'Generating...' };

this.chatHistory.push(userMsg);
this.chatHistory.push(placeholder);
```

✅ No TypeScript error, and you get type safety.

---

Let me know if you'd like this typed model extracted into a separate file for reuse.
