sendChatMessage() {
  const message = this.chatInput.trim();
  if (!message) return;

  const userMsg = { role: 'user' as const, content: message };
  this.chatHistory.push(userMsg);
  this.chatInput = '';

  // Add placeholder message for response
  const placeholder: ChatMessage = { role: 'assistant', content: 'Generating...' };
  this.chatHistory.push(placeholder);

  // Prepare full context: all messages BEFORE placeholder
  const contextMessages = this.chatHistory
    .slice(0, -1) // Exclude placeholder
    .map(m => ({ role: m.role, content: m.content }));

  // Log context for debugging
  console.log('üîÅ Sending full chat context to Ollama:', contextMessages);

  fetch('http://localhost:11434/api/chat', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: this.selectedModel,
      messages: contextMessages
    })
  })
    .then(res => res.json())
    .then(data => {
      const reply = data.message?.content || '[No response from model]';

      // ‚úÖ Update placeholder with actual response
      const placeholderIndex = this.chatHistory.indexOf(placeholder);
      if (placeholderIndex !== -1) {
        this.chatHistory[placeholderIndex] = {
          role: 'assistant',
          content: reply
        };
      }

      console.log('‚úÖ Updated chat history:', this.chatHistory);
    })
    .catch(err => {
      placeholder.content = '[Error connecting to Ollama]';
      console.error('‚ùå Ollama error:', err);
    });
}
