✅ Perfect — here’s how to implement both:

---

### ✅ 1. **Keep Chat History Until “Clear Chat”**

You're already doing this with:

```ts
chatHistory: { role: 'user' | 'assistant', content: string }[] = [];
```

And clearing it with:

```ts
clearChatHistory() {
  this.chatHistory = [];
}
```

✅ This ensures history is remembered as long as the app is open — or until cleared.

---

### ✅ 2. **Show “Generating...” While Waiting for Response**

Update `sendChatMessage()` to:

* Push a temporary placeholder message (e.g., `Generating...`)
* Replace it with the real response once it arrives

---

### ✅ Final Code: `sendChatMessage()`

```ts
sendChatMessage() {
  const message = this.chatInput.trim();
  if (!message) return;

  const userMsg = { role: 'user', content: message };
  this.chatHistory.push(userMsg);
  this.chatInput = '';

  // Add temporary 'Generating...' message
  const placeholder = { role: 'assistant', content: 'Generating...' };
  this.chatHistory.push(placeholder);

  fetch('http://localhost:11434/api/generate', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: this.selectedModel,
      prompt: message,
      stream: false
    })
  })
    .then(res => res.json())
    .then(data => {
      const reply = data.response || '[No response from model]';
      placeholder.content = reply; // Update in-place
    })
    .catch(err => {
      placeholder.content = '[Error connecting to Ollama]';
      console.error(err);
    });
}
```

---

### ✅ Optional: Auto-scroll after update

Add this after `placeholder.content = reply;`:

```ts
setTimeout(() => {
  const chatWindow = document.querySelector('.chat-window');
  if (chatWindow) chatWindow.scrollTop = chatWindow.scrollHeight;
}, 100);
```

---

Let me know if you want to persist chat history across sessions using `localStorage`, or include the full context (`messages: [...]`) for smarter replies!
