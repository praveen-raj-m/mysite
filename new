Got it â€” you want the **prompt to contain both:**

1. âœ… A **JSON table** (from the pasted CSV), and
2. âœ… A **set of natural-language instructions** (for the LLM, e.g., Gemma)

---

### âœ… Final Format Example

```text
You are a financial analyst. Analyze the following portfolio attribution data in JSON format.

Identify key allocation and selection effects, and explain any performance variance based on the data.

Data:
[
  {
    "Industry Code": "Tech",
    "Portfolio Weight": "0.25",
    "Benchmark Weight": "0.30"
  },
  {
    "Industry Code": "Energy",
    "Portfolio Weight": "0.10",
    "Benchmark Weight": "0.05"
  }
]
```

---

### âœ… Angular Update: Prepend Instructions to JSON

#### âœ… `generatePrompt()` method updated:

```ts
generatePrompt() {
  try {
    const lines = this.rawInput.trim().split('\n');
    if (lines.length < 2) {
      this.prompt = 'Invalid table. At least 1 header and 1 row required.';
      return;
    }

    const headers = lines[0].split(',').map(h => h.trim());
    const jsonData = lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim());
      const row: any = {};
      headers.forEach((header, index) => {
        row[header] = values[index] || '';
      });
      return row;
    });

    const jsonString = JSON.stringify(jsonData, null, 2);

    this.prompt =
      `You are a financial analyst. Analyze the following portfolio attribution data in JSON format.\n\n` +
      `Identify key allocation and selection effects, and explain any performance variance based on the data.\n\n` +
      `Data:\n${jsonString}`;
  } catch (err) {
    this.prompt = 'Error parsing input.';
  }
}
```

---

### âœ… UI (Optional: make JSON scrollable and styled)

You can update the `<pre>` block to make the output more readable if needed.

---

### ðŸ”œ Want to send this prompt to your backend after processing?

Let me know â€” Iâ€™ll help you hook up the POST request to your Ollama `.NET Web API`.
